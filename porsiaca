#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon May 11 23:32:07 2020

@author: ar
"""

prob = 0.5
        
        #UP        
        a = 0
        for y in range(self.Y):
            for x in range(self.X):
                s = (y-1)*self.X + x                
                probAux = prob
                
                if (x == 0 or x == self.X-1 or y == 0):
                    # cai no rio
                    nextx = x
                    nexty = max(y-1,1)
                    nexts = (nexty-1)*self.X + nextx  
                    T[a][s][nexts] = T[a][s][nexts] + 1                    
                else:
                    # acao vai para onde eu quero
                    nextx = x
                    nexty = max(y-1,1)
                    nexts = (nexty-1)*self.X + nextx                    
                    T[a][s][nexts] = T[a][s][nexts] + (1-probAux)

                    # voltar para o estado inicial com prob 0.5     
                    nextx = 1
                    nexty = self.Y
                    nexts = (nexty-1)*self.X + nextx
                    T[a][s][nexts] = T[a][s][nexts] + probAux
        # Meta
        T[a][self.S-1][:] = 0 
        T[a][self.S-1][self.S-1] = 1 
        
        #DOWN
        a = 1
        for y in range(self.Y):
            for x in range(self.X):
                s = (y-1)*self.X + x                
                probAux = prob
                # definir se é o rio ou nao
                if (x == 1 or x == self.X or y == 1):
                    nextx = x
                    nexty = min(y+1,1)
                    nexts = (nexty-1)*self.X + nextx                    
                    T[a][s][nexts] = T[a][s][nexts] + 1
                else:
                    nextx = x
                    nexty = min(y+1,1)
                    nexts = (nexty-1)*self.X + nextx                    
                    T[a][s][nexts] = T[a][s][nexts] + (1-probAux)
        
                    nextx = 1
                    nexty = self.Y
                    nexts = (nexty-1)*self.X + nextx
                    T[a][s][nexts] = T[a][s][nexts] + probAux
        # Meta
        T[a][self.S-1][:] = 0 
        T[a][self.S-1][self.S-1] = 1 
        
        #LEFT
        a = 3
        for y in range(self.Y):
            for x in range(self.X):
                s = (y-1)*self.X + x                
                probAux = prob
                # definir se é o rio ou nao
                if (x == 1 or x == self.X or y == 1):
                    nextx = max(x-1,1)
                    nexty = y
                    nexts = (nexty-1)*self.X + nextx                    
                    T[a][s][nexts] = T[a][s][nexts] + 1
                else:
                    nextx = max(x-1,1)
                    nexty = y
                    nexts = (nexty-1)*self.X + nextx                    
                    T[a][s][nexts] = T[a][s][nexts] + (1-probAux)
        
                    nextx = 1
                    nexty = self.Y
                    nexts = (nexty-1)*self.X + nextx
                    T[a][s][nexts] = T[a][s][nexts] + probAux
        # Meta
        T[a][self.S-1][:] = 0 
        T[a][self.S-1][self.S-1] = 1 
        
        #RIGHT
        a = 2
        for y in range(self.Y):
            for x in range(self.X):
                s = (y-1)*self.X + x                
                probAux = prob
                # definir se é o rio ou nao
                if (x == 1 or x == self.X or y == 1):
                    nextx = min(x+1,1)
                    nexty = y
                    nexts = (nexty-1)*self.X + nextx                    
                    T[a][s][nexts] = T[a][s][nexts] + 1
                else:
                    nextx = min(x+1,1)
                    nexty = y
                    nexts = (nexty-1)*self.X + nextx                    
                    T[a][s][nexts] = T[a][s][nexts] + (1-probAux)
        
                    nextx = 1
                    nexty = self.Y
                    nexts = (nexty-1)*self.X + nextx
                    T[a][s][nexts] = T[a][s][nexts] + probAux
        # Meta
        T[a][self.S-1][:] = 0 
        T[a][self.S-1][self.S-1] = 1 
        
        self.T_matrix = T
        return T[accion][s_in-1][s_out-1]